$standardRadius: 5px;
$standardBorderColor: rgba(0, 0, 0, 0.6);
$standardBorder: 1px solid $standardBorderColor;

*{
    color:black;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

html,body{
    background-color: $bodyPrimaryBackground;
}

.noselect{
    @include user-select(none);
}

.radius-standard{
    @include border-radius($standardRadius);
}

.d-block{
    display: block;
}

.d-inline-block{
    display: inline-block;
}

.text-{
    &center{
        text-align: center;
    }
    &left{
        text-align: left;
    }
    &right{
        text-align: right;
    }
    &white{
        color: white;
    }
    &black{
        color: black;
    }
}

.float-{
    &left{
        float:left;
    }
    &right{
        float:right;
    }
}

.text-small{
    font-size: x-small;
}

h1{
    font-size: 2em;
}
h2{
    font-size: 1.5em;
}
h3{
    font-size: 1.2em;
}
h4{
    font-size: 1em;
}
h5{
    font-size: 0.83em;
}
h6{
    font-size: 0.67em;
}

header.navbar{

    nav{
        padding: 15px;

        .mobile-header{
            display: flex;
            justify-content: space-between;
        }

        .brand{
            display: inline;
            font-size: 25px;
        }

        ul,
        ol{
            display: none;
            list-style-type: none;
            flex-direction: column;

            li{
                font-size: 18px;
                padding-top: 5px;
                padding-bottom: 5px;
                text-align: center;
            }

            &.open{
                display: block;
            }
        }

        .hamburger-button{
            display: inline;
            font-size: 25px;
        }

        a{
            &:link,
            &:visited,
            &:hover,
            &:active{
                text-decoration: none;
            }
        }
    }
    
    &.top{
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
    }

    &.fixed{
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
    }

    &.sticky{
        position: sticky;
        left: 0;
        right: 0;
        top: 0;
    }
}

.container{
    width: 100%;   
}

footer{
    position: absolute;
    left:0;
    right:0;
    background-color: $footerPrimaryBackground;
}

.row{
    width: 100%;
    display: block;
}

.card,
.accordion{
    @extend .radius-standard;
    margin: 5px;
    background-color: $cardPrimaryBackground;
    border: $standardBorder;
    border-color: $standardBorderColor;

    .header{
        @include border-top-left-radius($standardRadius);
        @include border-top-right-radius($standardRadius);
        border: $standardBorder;
        border-color: $standardBorderColor;
        border-left: none;
        border-right: none;
        border-top: none;
        background-color: $cardHeaderBackground;
        font-size: 18px;
        padding: 5px;
    }

    .body{
        padding: 5px;
    }
}

.accordion {
    @include transition(all 0.4s ease);
    .header{
        @include border-radius(0);
        @extend .noselect;
        cursor: pointer;
        border-bottom: 1px solid $standardBorderColor;
        border-top: 1px solid $standardBorderColor;
    }

    .accordion-tab:first-child .header{
        border-top: none;
    }

    .closed {
        .header{
            border-bottom: none;
        }

        .body{
            display:none;
        }
    }
    .open .body{
        display:block;
    }
}

$textInputList: (
    "input[type=date]",
    "input[type=datetime-local]",
    "input[type=email]",
    "input[type=month]",
    "input[type=number]",
    "input[type=search]",
    "input[type=tel]",
    "input[type=text]",
    "input[type=time]",
    "input[type=url]",
    "input[type=week]",
    "input[type=password]"
);

@each $selector in $textInputList {
    #{$selector}{
        @extend .radius-standard;
        border: $standardBorder;
    }
}

@each $key, $value in $themeColors {
    $oppositeColor: map-get($oppositeColors, $key);

    .#{$key} {
        color: $value;
    }

    .bg-#{$key} {
        background-color: $value;
    }

    .fg-#{$key} {
        color: $value;
    }

    a,
    button,
    input[type=submit],
    input[type=button],
    input[type=reset]{ // Buttons
        &.#{$key}{
            @extend .radius-standard;
            @extend .noselect;
            text-decoration: none;
            display: inline-block;
            line-height: normal;
            box-sizing: border-box;
            background-color: $value;
            color: $oppositeColor;
            border: none transparent;
            padding: .5em 1em;
            font-size: 100%;
            white-space: nowrap;
            cursor: pointer;
            text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
        }
    }

    header.navbar{
        &.#{$key}{
            background-color: $value;
            color: $oppositeColor;

            a{
                &:link,
                &:visited{
                    color: $oppositeColor;
                }

                &:hover{
                    color: darken($oppositeColor, $amount: 10);
                }

                &:active{
                    color: $oppositeColor;
                }
            }
        }
    }

    @each $selector in $textInputList { // Inputs
        #{$selector}.#{$key}{
            @extend .radius-standard;
            background-color: $value;
            color: $oppositeColor;

            &::-webkit-input-placeholder{
                color: darken($oppositeColor, $amount: 5);
            }
            &::-ms-input-placeholder{
                color: darken($oppositeColor, $amount: 5);
            }
            &::placeholder{
                color: darken($oppositeColor, $amount: 5);
            }
        }
    }
}

@for $i from 1 through 10 { // Scaling classes
    $scaleUp: 1 + ($i / 10);
    $scaleDown: 1 - ($i / 10);    
    .scale-up-#{$i}{
        @include transform(scale($scaleUp));
    }
    .scale-down-#{$i}{
        @include transform(scale($scaleDown));
    }
    .scale-up-#{$i}-hover:hover{
        @include transform(scale($scaleUp));
    }
    .scale-down-#{$i}-hover:hover{
        @include transform(scale($scaleDown));
    }
}